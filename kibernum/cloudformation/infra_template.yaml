AWSTemplateFormatVersion: '2010-09-09'
Description: Plantilla de CloudFormation para la creación de la infraestructura necesaria para el despliegue de la aplicacion de productos

Parameters:
  BucketName:
    Description: Nombre del bucket S3
    Type: String

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
      Tags:
        - Key: Name
          Value: !Ref BucketName
        - Key: lm_troux_uid
          Value: 123

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access Identity for S3 Bucket

  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontAccessToS3
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${BucketName}/*'

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultRootObject: index.html
      Tags: 
        - Key: lm_troux_uid
          Value: 123
  
  DDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'productos'
      AttributeDefinitions:
        - AttributeName: 'Id'
          AttributeType: 'N'
        - AttributeName: 'Nombre'
          AttributeType: 'S'
        - AttributeName: 'Cantidad'
          AttributeType: 'N'
      KeySchema:
        - AttributeName: 'Id'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  InsertInitialDataFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('productos')
              
              items = [
                  {"Id": 1, "Nombre": "Tomate", "Cantidad": 10},
                  {"Id": 2, "Nombre": "Cebolla", "Cantidad": 5}
              ]
              
              with table.batch_writer() as batch:
                  for item in items:
                      batch.put_item(Item=item)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Items inserted successfully')
              }
      Runtime: python3.8
      Timeout: 300

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                Resource: !GetAtt DDBTable.Arn

  CustomResource:
    Type: 'Custom::InsertInitialData'
    Properties:
      ServiceToken: !GetAtt InsertInitialDataFunction.Arn

Outputs:
  BucketName:
    Description: Nombre del bucket de S3
    Value: !Ref BucketName
  CloudFrontDistributionDomainName:
    Description: URL de la distribución de CloudFront
    Value: !GetAtt CloudFrontDistribution.DomainName
  DDBTableName:
    Description: Nombre de la tabla de DynamoDB
    Value: !Ref DDBTable